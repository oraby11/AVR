
KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000007fa  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001426  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b7  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bae  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000204  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a1  00000000  00000000  000034a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f41  00000000  00000000  00003b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00004a86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1e 03 	call	0x63c	; 0x63c <main>
  7a:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_voidSendCommand>:
		 /*go back DDRAM to display the pattern  */
		 CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
		 /*display the pattern written in the CGRAM*/
		 CLCD_voidSendData(Copy_u8PatternNumber);
		
	}
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	65 e0       	ldi	r22, 0x05	; 5
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	66 e0       	ldi	r22, 0x06	; 6
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  9a:	6c 2f       	mov	r22, r28
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 28 02 	call	0x450	; 0x450 <DIO_u8SetPortValue>
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	67 e0       	ldi	r22, 0x07	; 7
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  ac:	8f e9       	ldi	r24, 0x9F	; 159
  ae:	9f e0       	ldi	r25, 0x0F	; 15
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <CLCD_voidSendCommand+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <CLCD_voidSendCommand+0x34>
  b6:	00 00       	nop
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	67 e0       	ldi	r22, 0x07	; 7
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <CLCD_voidSendData>:
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	66 e0       	ldi	r22, 0x06	; 6
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  de:	6c 2f       	mov	r22, r28
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 28 02 	call	0x450	; 0x450 <DIO_u8SetPortValue>
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
  f0:	8f e9       	ldi	r24, 0x9F	; 159
  f2:	9f e0       	ldi	r25, 0x0F	; 15
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <CLCD_voidSendData+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <CLCD_voidSendData+0x34>
  fa:	00 00       	nop
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <CLCD_voidInit>:
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 ef       	ldi	r24, 0xF9	; 249
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <CLCD_voidInit+0x6>
 118:	00 c0       	rjmp	.+0      	; 0x11a <CLCD_voidInit+0x10>
 11a:	00 00       	nop
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
 122:	8c e0       	ldi	r24, 0x0C	; 12
 124:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
 12e:	08 95       	ret

00000130 <CLCD_voidSendString>:
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	8c 01       	movw	r16, r24
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	03 c0       	rjmp	.+6      	; 0x142 <CLCD_voidSendString+0x12>
 13c:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	f1 1d       	adc	r31, r1
 148:	80 81       	ld	r24, Z
 14a:	81 11       	cpse	r24, r1
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <CLCD_voidSendString+0xc>
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <CLCD_voidWriteNumber>:
		void CLCD_voidWriteNumber(u32 Copy_u32Number){
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	8b 01       	movw	r16, r22
 164:	9c 01       	movw	r18, r24
		{
			CLCD_voidSendData(Local_CopyBit[i]);
		}*/
		u32 LOC_u32Reversed = 1 ;

		if( Copy_u32Number == 0 ){ CLCD_voidSendData('0'); }
 166:	67 2b       	or	r22, r23
 168:	68 2b       	or	r22, r24
 16a:	69 2b       	or	r22, r25
 16c:	49 f5       	brne	.+82     	; 0x1c0 <CLCD_voidWriteNumber+0x6a>
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
 174:	46 c0       	rjmp	.+140    	; 0x202 <CLCD_voidWriteNumber+0xac>

		else{
			
			while( Copy_u32Number != 0 ){

				LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	6c 01       	movw	r12, r24
 184:	7d 01       	movw	r14, r26
 186:	cc 0c       	add	r12, r12
 188:	dd 1c       	adc	r13, r13
 18a:	ee 1c       	adc	r14, r14
 18c:	ff 1c       	adc	r15, r15
 18e:	cc 0c       	add	r12, r12
 190:	dd 1c       	adc	r13, r13
 192:	ee 1c       	adc	r14, r14
 194:	ff 1c       	adc	r15, r15
 196:	c8 0e       	add	r12, r24
 198:	d9 1e       	adc	r13, r25
 19a:	ea 1e       	adc	r14, r26
 19c:	fb 1e       	adc	r15, r27
 19e:	c9 01       	movw	r24, r18
 1a0:	b8 01       	movw	r22, r16
 1a2:	2a e0       	ldi	r18, 0x0A	; 10
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__udivmodsi4>
 1ae:	6c 0d       	add	r22, r12
 1b0:	7d 1d       	adc	r23, r13
 1b2:	8e 1d       	adc	r24, r14
 1b4:	9f 1d       	adc	r25, r15
				Copy_u32Number /= 10 ;
 1b6:	02 2f       	mov	r16, r18
 1b8:	13 2f       	mov	r17, r19
 1ba:	24 2f       	mov	r18, r20
 1bc:	35 2f       	mov	r19, r21
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <CLCD_voidWriteNumber+0x72>
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0

		if( Copy_u32Number == 0 ){ CLCD_voidSendData('0'); }

		else{
			
			while( Copy_u32Number != 0 ){
 1c8:	01 15       	cp	r16, r1
 1ca:	11 05       	cpc	r17, r1
 1cc:	21 05       	cpc	r18, r1
 1ce:	31 05       	cpc	r19, r1
 1d0:	91 f6       	brne	.-92     	; 0x176 <CLCD_voidWriteNumber+0x20>
 1d2:	12 c0       	rjmp	.+36     	; 0x1f8 <CLCD_voidWriteNumber+0xa2>
				LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
				Copy_u32Number /= 10 ;
			}
			while( LOC_u32Reversed != 1 ){

				CLCD_voidSendData( ( LOC_u32Reversed % 10 ) + 48 );
 1d4:	2a e0       	ldi	r18, 0x0A	; 10
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__udivmodsi4>
 1e0:	e2 2e       	mov	r14, r18
 1e2:	f3 2e       	mov	r15, r19
 1e4:	04 2f       	mov	r16, r20
 1e6:	15 2f       	mov	r17, r21
 1e8:	80 e3       	ldi	r24, 0x30	; 48
 1ea:	86 0f       	add	r24, r22
 1ec:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
				LOC_u32Reversed /= 10 ;
 1f0:	6e 2d       	mov	r22, r14
 1f2:	7f 2d       	mov	r23, r15
 1f4:	80 2f       	mov	r24, r16
 1f6:	91 2f       	mov	r25, r17
			while( Copy_u32Number != 0 ){

				LOC_u32Reversed = ( LOC_u32Reversed * 10 ) + ( Copy_u32Number % 10 );
				Copy_u32Number /= 10 ;
			}
			while( LOC_u32Reversed != 1 ){
 1f8:	61 30       	cpi	r22, 0x01	; 1
 1fa:	71 05       	cpc	r23, r1
 1fc:	81 05       	cpc	r24, r1
 1fe:	91 05       	cpc	r25, r1
 200:	49 f7       	brne	.-46     	; 0x1d4 <CLCD_voidWriteNumber+0x7e>
				LOC_u32Reversed /= 10 ;

			}

		}
	}     
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	ff 90       	pop	r15
 208:	ef 90       	pop	r14
 20a:	df 90       	pop	r13
 20c:	cf 90       	pop	r12
 20e:	08 95       	ret

00000210 <CLCD_voidClearLCD>:
	
		
		void CLCD_voidClearLCD(void){	
		CLCD_voidSendCommand(0b00000001);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
 216:	08 95       	ret

00000218 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 218:	68 30       	cpi	r22, 0x08	; 8
 21a:	08 f0       	brcs	.+2      	; 0x21e <DIO_u8SetPinDirection+0x6>
 21c:	78 c0       	rjmp	.+240    	; 0x30e <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
 21e:	41 11       	cpse	r20, r1
 220:	3c c0       	rjmp	.+120    	; 0x29a <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	99 f0       	breq	.+38     	; 0x24c <DIO_u8SetPinDirection+0x34>
 226:	28 f0       	brcs	.+10     	; 0x232 <DIO_u8SetPinDirection+0x1a>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	e9 f0       	breq	.+58     	; 0x266 <DIO_u8SetPinDirection+0x4e>
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	41 f1       	breq	.+80     	; 0x280 <DIO_u8SetPinDirection+0x68>
 230:	70 c0       	rjmp	.+224    	; 0x312 <DIO_u8SetPinDirection+0xfa>
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 232:	2a b3       	in	r18, 0x1a	; 26
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8SetPinDirection+0x26>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8SetPinDirection+0x22>
 242:	80 95       	com	r24
 244:	82 23       	and	r24, r18
 246:	8a bb       	out	0x1a, r24	; 26
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 248:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
 24a:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 24c:	27 b3       	in	r18, 0x17	; 23
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPinDirection+0x40>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPinDirection+0x3c>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	87 bb       	out	0x17, r24	; 23
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 262:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
 264:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 266:	24 b3       	in	r18, 0x14	; 20
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinDirection+0x5a>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinDirection+0x56>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	84 bb       	out	0x14, r24	; 20
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 27c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 27e:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 280:	21 b3       	in	r18, 0x11	; 17
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinDirection+0x74>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8SetPinDirection+0x70>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	81 bb       	out	0x11, r24	; 17
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 296:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 298:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	e1 f5       	brne	.+120    	; 0x316 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	91 f0       	breq	.+36     	; 0x2c6 <DIO_u8SetPinDirection+0xae>
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <DIO_u8SetPinDirection+0x96>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	d9 f0       	breq	.+54     	; 0x2de <DIO_u8SetPinDirection+0xc6>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <DIO_u8SetPinDirection+0xde>
 2ac:	36 c0       	rjmp	.+108    	; 0x31a <DIO_u8SetPinDirection+0x102>
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 2ae:	2a b3       	in	r18, 0x1a	; 26
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8SetPinDirection+0xa2>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8SetPinDirection+0x9e>
 2be:	82 2b       	or	r24, r18
 2c0:	8a bb       	out	0x1a, r24	; 26
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 2c4:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 2c6:	27 b3       	in	r18, 0x17	; 23
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8SetPinDirection+0xba>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8SetPinDirection+0xb6>
 2d6:	82 2b       	or	r24, r18
 2d8:	87 bb       	out	0x17, r24	; 23
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 2dc:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 2de:	24 b3       	in	r18, 0x14	; 20
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8SetPinDirection+0xd2>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8SetPinDirection+0xce>
 2ee:	82 2b       	or	r24, r18
 2f0:	84 bb       	out	0x14, r24	; 20
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 2f4:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 2f6:	21 b3       	in	r18, 0x11	; 17
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8SetPinDirection+0xea>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8SetPinDirection+0xe6>
 306:	82 2b       	or	r24, r18
 308:	81 bb       	out	0x11, r24	; 17
#include "DIO_config.h"


u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 30c:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 31a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}
 31c:	08 95       	ret

0000031e <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	49 f0       	breq	.+18     	; 0x334 <DIO_u8SetPortDirection+0x16>
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_u8SetPortDirection+0x10>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	49 f0       	breq	.+18     	; 0x33a <DIO_u8SetPortDirection+0x1c>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	51 f0       	breq	.+20     	; 0x340 <DIO_u8SetPortDirection+0x22>
 32c:	0c c0       	rjmp	.+24     	; 0x346 <DIO_u8SetPortDirection+0x28>
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 32e:	6a bb       	out	0x1a, r22	; 26

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 330:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 332:	08 95       	ret
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 334:	67 bb       	out	0x17, r22	; 23

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 336:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 338:	08 95       	ret
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 33a:	64 bb       	out	0x14, r22	; 20

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 33c:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 33e:	08 95       	ret
		case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 340:	61 bb       	out	0x11, r22	; 17

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 342:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
		case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 344:	08 95       	ret
		default: Local_u8ErrorState=1;
 346:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 348:	08 95       	ret

0000034a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 34a:	68 30       	cpi	r22, 0x08	; 8
 34c:	08 f0       	brcs	.+2      	; 0x350 <DIO_u8SetPinValue+0x6>
 34e:	78 c0       	rjmp	.+240    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 350:	41 11       	cpse	r20, r1
 352:	3c c0       	rjmp	.+120    	; 0x3cc <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	99 f0       	breq	.+38     	; 0x37e <DIO_u8SetPinValue+0x34>
 358:	28 f0       	brcs	.+10     	; 0x364 <DIO_u8SetPinValue+0x1a>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	e9 f0       	breq	.+58     	; 0x398 <DIO_u8SetPinValue+0x4e>
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	41 f1       	breq	.+80     	; 0x3b2 <DIO_u8SetPinValue+0x68>
 362:	70 c0       	rjmp	.+224    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 364:	2b b3       	in	r18, 0x1b	; 27
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8SetPinValue+0x26>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8SetPinValue+0x22>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	8b bb       	out	0x1b, r24	; 27

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 37a:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 37c:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 37e:	28 b3       	in	r18, 0x18	; 24
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_u8SetPinValue+0x40>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	6a 95       	dec	r22
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_u8SetPinValue+0x3c>
 38e:	80 95       	com	r24
 390:	82 23       	and	r24, r18
 392:	88 bb       	out	0x18, r24	; 24

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 394:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 396:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 398:	25 b3       	in	r18, 0x15	; 21
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8SetPinValue+0x5a>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8SetPinValue+0x56>
 3a8:	80 95       	com	r24
 3aa:	82 23       	and	r24, r18
 3ac:	85 bb       	out	0x15, r24	; 21

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 3b0:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 3b2:	22 b3       	in	r18, 0x12	; 18
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_u8SetPinValue+0x74>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_u8SetPinValue+0x70>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	82 bb       	out	0x12, r24	; 18

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 3ca:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	e1 f5       	brne	.+120    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{
			switch(Copy_u8Port)
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	91 f0       	breq	.+36     	; 0x3f8 <DIO_u8SetPinValue+0xae>
 3d4:	28 f0       	brcs	.+10     	; 0x3e0 <DIO_u8SetPinValue+0x96>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	d9 f0       	breq	.+54     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	29 f1       	breq	.+74     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3de:	36 c0       	rjmp	.+108    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3e0:	2b b3       	in	r18, 0x1b	; 27
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8SetPinValue+0xa2>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8SetPinValue+0x9e>
 3f0:	82 2b       	or	r24, r18
 3f2:	8b bb       	out	0x1b, r24	; 27

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 3f6:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 3f8:	28 b3       	in	r18, 0x18	; 24
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	88 bb       	out	0x18, r24	; 24

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 40c:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 40e:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 410:	25 b3       	in	r18, 0x15	; 21
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	82 2b       	or	r24, r18
 422:	85 bb       	out	0x15, r24	; 21

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 424:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 426:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 428:	22 b3       	in	r18, 0x12	; 18
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	82 bb       	out	0x12, r24	; 18

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 43c:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 43e:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 44c:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 44e:	08 95       	ret

00000450 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	49 f0       	breq	.+18     	; 0x466 <DIO_u8SetPortValue+0x16>
 454:	28 f0       	brcs	.+10     	; 0x460 <DIO_u8SetPortValue+0x10>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	49 f0       	breq	.+18     	; 0x46c <DIO_u8SetPortValue+0x1c>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	51 f0       	breq	.+20     	; 0x472 <DIO_u8SetPortValue+0x22>
 45e:	0c c0       	rjmp	.+24     	; 0x478 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 460:	6b bb       	out	0x1b, r22	; 27

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 462:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 464:	08 95       	ret
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 466:	68 bb       	out	0x18, r22	; 24

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 468:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 46a:	08 95       	ret
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 46c:	65 bb       	out	0x15, r22	; 21

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 46e:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 470:	08 95       	ret
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 472:	62 bb       	out	0x12, r22	; 18

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 474:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 476:	08 95       	ret
		default: Local_u8ErrorState=1;
 478:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 47a:	08 95       	ret

0000047c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
 47c:	41 15       	cp	r20, r1
 47e:	51 05       	cpc	r21, r1
 480:	d1 f1       	breq	.+116    	; 0x4f6 <DIO_u8GetPinValue+0x7a>
 482:	68 30       	cpi	r22, 0x08	; 8
 484:	d0 f5       	brcc	.+116    	; 0x4fa <DIO_u8GetPinValue+0x7e>
	{
		switch(Copy_u8Port)
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	91 f0       	breq	.+36     	; 0x4ae <DIO_u8GetPinValue+0x32>
 48a:	28 f0       	brcs	.+10     	; 0x496 <DIO_u8GetPinValue+0x1a>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	d9 f0       	breq	.+54     	; 0x4c6 <DIO_u8GetPinValue+0x4a>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	29 f1       	breq	.+74     	; 0x4de <DIO_u8GetPinValue+0x62>
 494:	34 c0       	rjmp	.+104    	; 0x4fe <DIO_u8GetPinValue+0x82>
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
 496:	89 b3       	in	r24, 0x19	; 25
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8GetPinValue+0x24>
 49c:	95 95       	asr	r25
 49e:	87 95       	ror	r24
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8GetPinValue+0x20>
 4a4:	81 70       	andi	r24, 0x01	; 1
 4a6:	fa 01       	movw	r30, r20
 4a8:	80 83       	st	Z, r24

/*********************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;
 4aa:	80 e0       	ldi	r24, 0x00	; 0

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
	{
		switch(Copy_u8Port)
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
 4ac:	08 95       	ret
			case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
 4ae:	86 b3       	in	r24, 0x16	; 22
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_u8GetPinValue+0x3c>
 4b4:	95 95       	asr	r25
 4b6:	87 95       	ror	r24
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_u8GetPinValue+0x38>
 4bc:	81 70       	andi	r24, 0x01	; 1
 4be:	fa 01       	movw	r30, r20
 4c0:	80 83       	st	Z, r24

/*********************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
	{
		switch(Copy_u8Port)
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
			case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
 4c4:	08 95       	ret
			case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
 4c6:	83 b3       	in	r24, 0x13	; 19
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_u8GetPinValue+0x54>
 4cc:	95 95       	asr	r25
 4ce:	87 95       	ror	r24
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_u8GetPinValue+0x50>
 4d4:	81 70       	andi	r24, 0x01	; 1
 4d6:	fa 01       	movw	r30, r20
 4d8:	80 83       	st	Z, r24

/*********************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;
 4da:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(Copy_u8Port)
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
			case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
			case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
 4dc:	08 95       	ret
			case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
 4de:	80 b3       	in	r24, 0x10	; 16
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8GetPinValue+0x6c>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8GetPinValue+0x68>
 4ec:	81 70       	andi	r24, 0x01	; 1
 4ee:	fa 01       	movw	r30, r20
 4f0:	80 83       	st	Z, r24

/*********************************************************************************/

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
	u8 Local_u8ErrorState=0;
 4f2:	80 e0       	ldi	r24, 0x00	; 0
		switch(Copy_u8Port)
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
			case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
			case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
			case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
 4f4:	08 95       	ret
			default: Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
		{
			case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
			case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
			case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
			case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
			default: Local_u8ErrorState=1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}
 500:	08 95       	ret

00000502 <KPD_u8GetPressedKEY>:
#include "DIO_interface.h"
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_private.h"

u8 KPD_u8GetPressedKEY(void){
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
		
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++){
 518:	00 e0       	ldi	r16, 0x00	; 0
 51a:	42 c0       	rjmp	.+132    	; 0x5a0 <KPD_u8GetPressedKEY+0x9e>
	/*activate current column*/
	DIO_u8SetPinValue(KPD_PORT ,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
 51c:	c0 2e       	mov	r12, r16
 51e:	d1 2c       	mov	r13, r1
 520:	f6 01       	movw	r30, r12
 522:	ec 58       	subi	r30, 0x8C	; 140
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	60 81       	ld	r22, Z
 52a:	83 e0       	ldi	r24, 0x03	; 3
 52c:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
	for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++){
 530:	10 e0       	ldi	r17, 0x00	; 0
 532:	2b c0       	rjmp	.+86     	; 0x58a <KPD_u8GetPressedKEY+0x88>
	/* read the current row*/
	DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 534:	e1 2e       	mov	r14, r17
 536:	f1 2c       	mov	r15, r1
 538:	f7 01       	movw	r30, r14
 53a:	e0 59       	subi	r30, 0x90	; 144
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	ae 01       	movw	r20, r28
 540:	4f 5f       	subi	r20, 0xFF	; 255
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	60 81       	ld	r22, Z
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_u8GetPinValue>
	/*check if key pressed 
	LOW because pull up*/
	if(DIO_u8PIN_LOW==Local_u8PinState){
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	81 11       	cpse	r24, r1
 550:	1b c0       	rjmp	.+54     	; 0x588 <KPD_u8GetPressedKEY+0x86>
	Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
 552:	c7 01       	movw	r24, r14
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	80 5a       	subi	r24, 0xA0	; 160
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	fc 01       	movw	r30, r24
 562:	ec 0d       	add	r30, r12
 564:	fd 1d       	adc	r31, r13
 566:	10 81       	ld	r17, Z
	/*POLLING busy waiting until key is released */
	while(DIO_u8PIN_LOW==Local_u8PinState){
 568:	0a c0       	rjmp	.+20     	; 0x57e <KPD_u8GetPressedKEY+0x7c>
	DIO_u8GetPinValue(KPD_PORT ,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 56a:	ae 01       	movw	r20, r28
 56c:	4f 5f       	subi	r20, 0xFF	; 255
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	f7 01       	movw	r30, r14
 572:	e0 59       	subi	r30, 0x90	; 144
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	60 81       	ld	r22, Z
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	0e 94 3e 02 	call	0x47c	; 0x47c <DIO_u8GetPinValue>
	/*check if key pressed 
	LOW because pull up*/
	if(DIO_u8PIN_LOW==Local_u8PinState){
	Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
	/*POLLING busy waiting until key is released */
	while(DIO_u8PIN_LOW==Local_u8PinState){
 57e:	99 81       	ldd	r25, Y+1	; 0x01
 580:	99 23       	and	r25, r25
 582:	99 f3       	breq	.-26     	; 0x56a <KPD_u8GetPressedKEY+0x68>
	DIO_u8GetPinValue(KPD_PORT ,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
	    	}
			return Local_u8PressedKey;
 584:	81 2f       	mov	r24, r17
 586:	10 c0       	rjmp	.+32     	; 0x5a8 <KPD_u8GetPressedKEY+0xa6>
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
		
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++){
	/*activate current column*/
	DIO_u8SetPinValue(KPD_PORT ,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
	for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++){
 588:	1f 5f       	subi	r17, 0xFF	; 255
 58a:	14 30       	cpi	r17, 0x04	; 4
 58c:	98 f2       	brcs	.-90     	; 0x534 <KPD_u8GetPressedKEY+0x32>
			return Local_u8PressedKey;
			}		
	        }
	/*deactivate the current row*/
	
    DIO_u8SetPinValue(KPD_PORT ,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
 58e:	f6 01       	movw	r30, r12
 590:	ec 58       	subi	r30, 0x8C	; 140
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	41 e0       	ldi	r20, 0x01	; 1
 596:	60 81       	ld	r22, Z
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_u8SetPinValue>
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
		
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++){
 59e:	0f 5f       	subi	r16, 0xFF	; 255
 5a0:	04 30       	cpi	r16, 0x04	; 4
 5a2:	08 f4       	brcc	.+2      	; 0x5a6 <KPD_u8GetPressedKEY+0xa4>
 5a4:	bb cf       	rjmp	.-138    	; 0x51c <KPD_u8GetPressedKEY+0x1a>
	        }
	/*deactivate the current row*/
	
    DIO_u8SetPinValue(KPD_PORT ,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	   }
     	return Local_u8PressedKey;	
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
}
 5a8:	0f 90       	pop	r0
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	df 90       	pop	r13
 5b8:	cf 90       	pop	r12
 5ba:	08 95       	ret

000005bc <Calculator>:
	}
}

u8 Calculator(u8 Local_u8KEYPressedNumber1, u8 Local_u8KEYPressedNumber2, u8 Local_u8KEYOperation)
{
	switch(Local_u8KEYOperation)
 5bc:	4b 32       	cpi	r20, 0x2B	; 43
 5be:	79 f1       	breq	.+94     	; 0x61e <Calculator+0x62>
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <Calculator+0xc>
 5c2:	4a 32       	cpi	r20, 0x2A	; 42
 5c4:	91 f0       	breq	.+36     	; 0x5ea <Calculator+0x2e>
 5c6:	35 c0       	rjmp	.+106    	; 0x632 <Calculator+0x76>
 5c8:	4d 32       	cpi	r20, 0x2D	; 45
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <Calculator+0x16>
 5cc:	4f 32       	cpi	r20, 0x2F	; 47
 5ce:	b9 f0       	breq	.+46     	; 0x5fe <Calculator+0x42>
 5d0:	30 c0       	rjmp	.+96     	; 0x632 <Calculator+0x76>
	{
		case '-':
		CLCD_voidWriteNumber(Local_u8KEYPressedNumber1 - Local_u8KEYPressedNumber2);
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	9c 01       	movw	r18, r24
 5d6:	26 1b       	sub	r18, r22
 5d8:	31 09       	sbc	r19, r1
 5da:	b9 01       	movw	r22, r18
 5dc:	07 2e       	mov	r0, r23
 5de:	00 0c       	add	r0, r0
 5e0:	88 0b       	sbc	r24, r24
 5e2:	99 0b       	sbc	r25, r25
 5e4:	0e 94 ab 00 	call	0x156	; 0x156 <CLCD_voidWriteNumber>
		break;
 5e8:	08 95       	ret
		case '*':
		CLCD_voidWriteNumber(Local_u8KEYPressedNumber1 * Local_u8KEYPressedNumber2);
 5ea:	86 9f       	mul	r24, r22
 5ec:	b0 01       	movw	r22, r0
 5ee:	11 24       	eor	r1, r1
 5f0:	07 2e       	mov	r0, r23
 5f2:	00 0c       	add	r0, r0
 5f4:	88 0b       	sbc	r24, r24
 5f6:	99 0b       	sbc	r25, r25
 5f8:	0e 94 ab 00 	call	0x156	; 0x156 <CLCD_voidWriteNumber>
		break;
 5fc:	08 95       	ret
		case '/':
		if (Local_u8KEYPressedNumber2 != 0)
 5fe:	66 23       	and	r22, r22
 600:	49 f0       	breq	.+18     	; 0x614 <Calculator+0x58>
		{
			CLCD_voidWriteNumber(Local_u8KEYPressedNumber1 / Local_u8KEYPressedNumber2);
 602:	0e 94 cd 03 	call	0x79a	; 0x79a <__udivmodqi4>
 606:	68 2f       	mov	r22, r24
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 ab 00 	call	0x156	; 0x156 <CLCD_voidWriteNumber>
 612:	08 95       	ret
		}
		else
		{
			CLCD_voidSendString("Err");
 614:	88 e7       	ldi	r24, 0x78	; 120
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 98 00 	call	0x130	; 0x130 <CLCD_voidSendString>
 61c:	08 95       	ret
		}
		break;
		case '+':
		CLCD_voidWriteNumber(Local_u8KEYPressedNumber1 + Local_u8KEYPressedNumber2);
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	68 0f       	add	r22, r24
 622:	71 1d       	adc	r23, r1
 624:	07 2e       	mov	r0, r23
 626:	00 0c       	add	r0, r0
 628:	88 0b       	sbc	r24, r24
 62a:	99 0b       	sbc	r25, r25
 62c:	0e 94 ab 00 	call	0x156	; 0x156 <CLCD_voidWriteNumber>
		break;
 630:	08 95       	ret
		default:
		CLCD_voidSendString("Invalid");
 632:	8c e7       	ldi	r24, 0x7C	; 124
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 98 00 	call	0x130	; 0x130 <CLCD_voidSendString>
		break;
	}
}
 63a:	08 95       	ret

0000063c <main>:

u8 Calculator(u8 Local_u8KEYPressedNumber1,u8 Local_u8KEYPressedNumber2,u8 Local_u8KEYOperation);

void main(void)
{
	PORT_voidInit();
 63c:	0e 94 c1 03 	call	0x782	; 0x782 <PORT_voidInit>
	// PINS OF LCD
	DIO_u8SetPortDirection(DIO_u8PORTB, DIO_u8PORT_OUTPUT);
 640:	6f ef       	ldi	r22, 0xFF	; 255
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN5, DIO_u8PIN_OUTPUT);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	65 e0       	ldi	r22, 0x05	; 5
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN6, DIO_u8PIN_OUTPUT);
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	66 e0       	ldi	r22, 0x06	; 6
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA, DIO_u8PIN7, DIO_u8PIN_OUTPUT);
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	67 e0       	ldi	r22, 0x07	; 7
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	// PORT KEYPAD
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN0, DIO_u8PIN_OUTPUT);
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	83 e0       	ldi	r24, 0x03	; 3
 66c:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_OUTPUT);
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	61 e0       	ldi	r22, 0x01	; 1
 674:	83 e0       	ldi	r24, 0x03	; 3
 676:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PIN_OUTPUT);
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	62 e0       	ldi	r22, 0x02	; 2
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN3, DIO_u8PIN_OUTPUT);
 684:	41 e0       	ldi	r20, 0x01	; 1
 686:	63 e0       	ldi	r22, 0x03	; 3
 688:	83 e0       	ldi	r24, 0x03	; 3
 68a:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN4, DIO_u8PIN_INPUT);
 68e:	40 e0       	ldi	r20, 0x00	; 0
 690:	64 e0       	ldi	r22, 0x04	; 4
 692:	83 e0       	ldi	r24, 0x03	; 3
 694:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN5, DIO_u8PIN_INPUT);
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	65 e0       	ldi	r22, 0x05	; 5
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_INPUT);
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	66 e0       	ldi	r22, 0x06	; 6
 6a6:	83 e0       	ldi	r24, 0x03	; 3
 6a8:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_INPUT);
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	67 e0       	ldi	r22, 0x07	; 7
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	0e 94 0c 01 	call	0x218	; 0x218 <DIO_u8SetPinDirection>
	DIO_u8SetPortValue(DIO_u8PORTD, DIO_u8PORT_HIGH);
 6b6:	6f ef       	ldi	r22, 0xFF	; 255
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	0e 94 28 02 	call	0x450	; 0x450 <DIO_u8SetPortValue>
	u8 Local_u8KEY;
	u8 Local_u8KEYPressedNumber1 = 0;
	u8 Local_u8KEYPressedNumber2 = 0;
	u8 Local_u8KEYOperation;
	u8 flag = 0;
	CLCD_voidInit();
 6be:	0e 94 85 00 	call	0x10a	; 0x10a <CLCD_voidInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	81 ee       	ldi	r24, 0xE1	; 225
 6c6:	94 e0       	ldi	r25, 0x04	; 4
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x8c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x96>
 6d2:	00 00       	nop
	//Initialize LCD
	_delay_ms(200); 
    CLCD_voidSendString("Calculator");
 6d4:	84 e8       	ldi	r24, 0x84	; 132
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 98 00 	call	0x130	; 0x130 <CLCD_voidSendString>
 6dc:	2f ef       	ldi	r18, 0xFF	; 255
 6de:	83 ed       	ldi	r24, 0xD3	; 211
 6e0:	90 e3       	ldi	r25, 0x30	; 48
 6e2:	21 50       	subi	r18, 0x01	; 1
 6e4:	80 40       	sbci	r24, 0x00	; 0
 6e6:	90 40       	sbci	r25, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0xa6>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0xb0>
 6ec:	00 00       	nop
	_delay_ms(2000);
	CLCD_voidClearLCD();
 6ee:	0e 94 08 01 	call	0x210	; 0x210 <CLCD_voidClearLCD>
	CLCD_voidSendString("Start");
 6f2:	8f e8       	ldi	r24, 0x8F	; 143
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	0e 94 98 00 	call	0x130	; 0x130 <CLCD_voidSendString>
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	83 ed       	ldi	r24, 0xD3	; 211
 6fe:	90 e3       	ldi	r25, 0x30	; 48
 700:	21 50       	subi	r18, 0x01	; 1
 702:	80 40       	sbci	r24, 0x00	; 0
 704:	90 40       	sbci	r25, 0x00	; 0
 706:	e1 f7       	brne	.-8      	; 0x700 <main+0xc4>
 708:	00 c0       	rjmp	.+0      	; 0x70a <main+0xce>
 70a:	00 00       	nop
	_delay_ms(2000);
	CLCD_voidClearLCD();
 70c:	0e 94 08 01 	call	0x210	; 0x210 <CLCD_voidClearLCD>
	
	u8 Local_u8KEY;
	u8 Local_u8KEYPressedNumber1 = 0;
	u8 Local_u8KEYPressedNumber2 = 0;
	u8 Local_u8KEYOperation;
	u8 flag = 0;
 710:	10 e0       	ldi	r17, 0x00	; 0
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_INPUT);
	DIO_u8SetPortValue(DIO_u8PORTD, DIO_u8PORT_HIGH);
	
	u8 Local_u8KEY;
	u8 Local_u8KEYPressedNumber1 = 0;
	u8 Local_u8KEYPressedNumber2 = 0;
 712:	e1 2c       	mov	r14, r1
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_INPUT);
	DIO_u8SetPinDirection(DIO_u8PORTD, DIO_u8PIN7, DIO_u8PIN_INPUT);
	DIO_u8SetPortValue(DIO_u8PORTD, DIO_u8PORT_HIGH);
	
	u8 Local_u8KEY;
	u8 Local_u8KEYPressedNumber1 = 0;
 714:	f1 2c       	mov	r15, r1
	CLCD_voidSendString("Start");
	_delay_ms(2000);
	CLCD_voidClearLCD();
	while (1)
	{
		Local_u8KEY = KPD_u8GetPressedKEY();
 716:	0e 94 81 02 	call	0x502	; 0x502 <KPD_u8GetPressedKEY>
 71a:	c8 2f       	mov	r28, r24
		if(Local_u8KEY >= '0' && Local_u8KEY <= '9' && flag == 0)
 71c:	d0 ed       	ldi	r29, 0xD0	; 208
 71e:	d8 0f       	add	r29, r24
 720:	da 30       	cpi	r29, 0x0A	; 10
 722:	38 f4       	brcc	.+14     	; 0x732 <main+0xf6>
 724:	11 11       	cpse	r17, r1
 726:	05 c0       	rjmp	.+10     	; 0x732 <main+0xf6>
		{
			CLCD_voidSendData(Local_u8KEY);  
 728:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
			Local_u8KEYPressedNumber1 = Local_u8KEY - '0';  
 72c:	fd 2e       	mov	r15, r29
			flag = 1; //flag to can add number 2
 72e:	11 e0       	ldi	r17, 0x01	; 1
 730:	f2 cf       	rjmp	.-28     	; 0x716 <main+0xda>
		}
		else if(Local_u8KEY >= '0' && Local_u8KEY <= '9' && flag == 1)
 732:	da 30       	cpi	r29, 0x0A	; 10
 734:	38 f4       	brcc	.+14     	; 0x744 <main+0x108>
 736:	11 30       	cpi	r17, 0x01	; 1
 738:	29 f4       	brne	.+10     	; 0x744 <main+0x108>
		{
			CLCD_voidSendData(Local_u8KEY); 
 73a:	8c 2f       	mov	r24, r28
 73c:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
			Local_u8KEYPressedNumber2 = Local_u8KEY - '0';  		
 740:	ed 2e       	mov	r14, r29
 742:	e9 cf       	rjmp	.-46     	; 0x716 <main+0xda>
		}
		else if (Local_u8KEY == '+' || Local_u8KEY == '-' || Local_u8KEY == '*' || Local_u8KEY == '/')
 744:	cb 32       	cpi	r28, 0x2B	; 43
 746:	31 f0       	breq	.+12     	; 0x754 <main+0x118>
 748:	cd 32       	cpi	r28, 0x2D	; 45
 74a:	21 f0       	breq	.+8      	; 0x754 <main+0x118>
 74c:	ca 32       	cpi	r28, 0x2A	; 42
 74e:	11 f0       	breq	.+4      	; 0x754 <main+0x118>
 750:	cf 32       	cpi	r28, 0x2F	; 47
 752:	29 f4       	brne	.+10     	; 0x75e <main+0x122>
		{
			CLCD_voidSendData(Local_u8KEY);  
 754:	8c 2f       	mov	r24, r28
 756:	0e 94 63 00 	call	0xc6	; 0xc6 <CLCD_voidSendData>
			
			Local_u8KEYOperation = Local_u8KEY;
 75a:	0c 2f       	mov	r16, r28
 75c:	dc cf       	rjmp	.-72     	; 0x716 <main+0xda>
		}
		else if (Local_u8KEY == '=')
 75e:	cd 33       	cpi	r28, 0x3D	; 61
 760:	51 f4       	brne	.+20     	; 0x776 <main+0x13a>
		{
			CLCD_voidSendString("=");
 762:	85 e9       	ldi	r24, 0x95	; 149
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 98 00 	call	0x130	; 0x130 <CLCD_voidSendString>
			Calculator(Local_u8KEYPressedNumber1, Local_u8KEYPressedNumber2, Local_u8KEYOperation);
 76a:	40 2f       	mov	r20, r16
 76c:	6e 2d       	mov	r22, r14
 76e:	8f 2d       	mov	r24, r15
 770:	0e 94 de 02 	call	0x5bc	; 0x5bc <Calculator>
 774:	d0 cf       	rjmp	.-96     	; 0x716 <main+0xda>
		}
		else if (Local_u8KEY == '?')
 776:	cf 33       	cpi	r28, 0x3F	; 63
 778:	71 f6       	brne	.-100    	; 0x716 <main+0xda>
		{
			CLCD_voidClearLCD();
 77a:	0e 94 08 01 	call	0x210	; 0x210 <CLCD_voidClearLCD>
			flag = 0;  
 77e:	10 e0       	ldi	r17, 0x00	; 0
 780:	ca cf       	rjmp	.-108    	; 0x716 <main+0xda>

00000782 <PORT_voidInit>:
#include "PORT_register.h"


void PORT_voidInit(void)
{
DDRA=PORTA_DIR;
 782:	80 ee       	ldi	r24, 0xE0	; 224
 784:	8a bb       	out	0x1a, r24	; 26
DDRB=PORTB_DIR;
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	87 bb       	out	0x17, r24	; 23
DDRC=PORTC_DIR;
 78a:	14 ba       	out	0x14, r1	; 20
DDRD=PORTD_DIR;
 78c:	9f e0       	ldi	r25, 0x0F	; 15
 78e:	91 bb       	out	0x11, r25	; 17

DDRA=PORTA_INITAL_VALUE;
 790:	1a ba       	out	0x1a, r1	; 26
DDRB=PORTB_INITAL_VALUE;
 792:	17 ba       	out	0x17, r1	; 23
DDRC=PORTC_INITAL_VALUE;
 794:	14 ba       	out	0x14, r1	; 20
DDRD=PORTD_INITAL_VALUE;
 796:	81 bb       	out	0x11, r24	; 17
 798:	08 95       	ret

0000079a <__udivmodqi4>:
 79a:	99 1b       	sub	r25, r25
 79c:	79 e0       	ldi	r23, 0x09	; 9
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <__udivmodqi4_ep>

000007a0 <__udivmodqi4_loop>:
 7a0:	99 1f       	adc	r25, r25
 7a2:	96 17       	cp	r25, r22
 7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__udivmodqi4_ep>
 7a6:	96 1b       	sub	r25, r22

000007a8 <__udivmodqi4_ep>:
 7a8:	88 1f       	adc	r24, r24
 7aa:	7a 95       	dec	r23
 7ac:	c9 f7       	brne	.-14     	; 0x7a0 <__udivmodqi4_loop>
 7ae:	80 95       	com	r24
 7b0:	08 95       	ret

000007b2 <__udivmodsi4>:
 7b2:	a1 e2       	ldi	r26, 0x21	; 33
 7b4:	1a 2e       	mov	r1, r26
 7b6:	aa 1b       	sub	r26, r26
 7b8:	bb 1b       	sub	r27, r27
 7ba:	fd 01       	movw	r30, r26
 7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <__udivmodsi4_ep>

000007be <__udivmodsi4_loop>:
 7be:	aa 1f       	adc	r26, r26
 7c0:	bb 1f       	adc	r27, r27
 7c2:	ee 1f       	adc	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	a2 17       	cp	r26, r18
 7c8:	b3 07       	cpc	r27, r19
 7ca:	e4 07       	cpc	r30, r20
 7cc:	f5 07       	cpc	r31, r21
 7ce:	20 f0       	brcs	.+8      	; 0x7d8 <__udivmodsi4_ep>
 7d0:	a2 1b       	sub	r26, r18
 7d2:	b3 0b       	sbc	r27, r19
 7d4:	e4 0b       	sbc	r30, r20
 7d6:	f5 0b       	sbc	r31, r21

000007d8 <__udivmodsi4_ep>:
 7d8:	66 1f       	adc	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	1a 94       	dec	r1
 7e2:	69 f7       	brne	.-38     	; 0x7be <__udivmodsi4_loop>
 7e4:	60 95       	com	r22
 7e6:	70 95       	com	r23
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	9b 01       	movw	r18, r22
 7ee:	ac 01       	movw	r20, r24
 7f0:	bd 01       	movw	r22, r26
 7f2:	cf 01       	movw	r24, r30
 7f4:	08 95       	ret

000007f6 <_exit>:
 7f6:	f8 94       	cli

000007f8 <__stop_program>:
 7f8:	ff cf       	rjmp	.-2      	; 0x7f8 <__stop_program>
