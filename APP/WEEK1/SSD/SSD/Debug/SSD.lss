
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003da  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c38  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000720  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004de  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006af  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  7a:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinDirection>:
			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinDirection+0x6>
  86:	78 c0       	rjmp	.+240    	; 0x178 <DIO_u8SetPinDirection+0xf6>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  88:	41 11       	cpse	r20, r1
  8a:	3c c0       	rjmp	.+120    	; 0x104 <DIO_u8SetPinDirection+0x82>
		{
			switch(Copy_u8Port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	99 f0       	breq	.+38     	; 0xb6 <DIO_u8SetPinDirection+0x34>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_u8SetPinDirection+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	e9 f0       	breq	.+58     	; 0xd0 <DIO_u8SetPinDirection+0x4e>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	41 f1       	breq	.+80     	; 0xea <DIO_u8SetPinDirection+0x68>
  9a:	70 c0       	rjmp	.+224    	; 0x17c <DIO_u8SetPinDirection+0xfa>
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_u8SetPinDirection+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_u8SetPinDirection+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  b4:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
  b6:	27 b3       	in	r18, 0x17	; 23
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_u8SetPinDirection+0x40>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_u8SetPinDirection+0x3c>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
  cc:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
  ce:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
  d0:	24 b3       	in	r18, 0x14	; 20
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_u8SetPinDirection+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_u8SetPinDirection+0x56>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	84 bb       	out	0x14, r24	; 20


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
  e8:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
  ea:	21 b3       	in	r18, 0x11	; 17
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_u8SetPinDirection+0x74>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_u8SetPinDirection+0x70>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	81 bb       	out	0x11, r24	; 17


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 100:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 102:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	e1 f5       	brne	.+120    	; 0x180 <DIO_u8SetPinDirection+0xfe>
		{
			switch(Copy_u8Port)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	91 f0       	breq	.+36     	; 0x130 <DIO_u8SetPinDirection+0xae>
 10c:	28 f0       	brcs	.+10     	; 0x118 <DIO_u8SetPinDirection+0x96>
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	d9 f0       	breq	.+54     	; 0x148 <DIO_u8SetPinDirection+0xc6>
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	29 f1       	breq	.+74     	; 0x160 <DIO_u8SetPinDirection+0xde>
 116:	36 c0       	rjmp	.+108    	; 0x184 <DIO_u8SetPinDirection+0x102>
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 118:	2a b3       	in	r18, 0x1a	; 26
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_u8SetPinDirection+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_u8SetPinDirection+0x9e>
 128:	82 2b       	or	r24, r18
 12a:	8a bb       	out	0x1a, r24	; 26


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 12c:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 12e:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_u8SetPinDirection+0xba>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_u8SetPinDirection+0xb6>
 140:	82 2b       	or	r24, r18
 142:	87 bb       	out	0x17, r24	; 23


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 144:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 146:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_u8SetPinDirection+0xd2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_u8SetPinDirection+0xce>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 15e:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 160:	21 b3       	in	r18, 0x11	; 17
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinDirection+0xea>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinDirection+0xe6>
 170:	82 2b       	or	r24, r18
 172:	81 bb       	out	0x11, r24	; 17


			
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 174:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 176:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 184:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState=1;
	}
	return Local_u8ErrorState;
}
 186:	08 95       	ret

00000188 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	49 f0       	breq	.+18     	; 0x19e <DIO_u8SetPortDirection+0x16>
 18c:	28 f0       	brcs	.+10     	; 0x198 <DIO_u8SetPortDirection+0x10>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	49 f0       	breq	.+18     	; 0x1a4 <DIO_u8SetPortDirection+0x1c>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	51 f0       	breq	.+20     	; 0x1aa <DIO_u8SetPortDirection+0x22>
 196:	0c c0       	rjmp	.+24     	; 0x1b0 <DIO_u8SetPortDirection+0x28>
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 198:	6a bb       	out	0x1a, r22	; 26

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 19a:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
 19c:	08 95       	ret
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 19e:	67 bb       	out	0x17, r22	; 23

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1a0:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
 1a2:	08 95       	ret
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 1a4:	64 bb       	out	0x14, r22	; 20

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
 1a8:	08 95       	ret
		case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 1aa:	61 bb       	out	0x11, r22	; 17

/***********************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
	u8 Local_u8ErrorState=0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
		case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
		case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
		case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
 1ae:	08 95       	ret
		default: Local_u8ErrorState=1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return Local_u8ErrorState;
}
 1b2:	08 95       	ret

000001b4 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	if(Copy_u8Pin<= DIO_u8PIN7)
 1b4:	68 30       	cpi	r22, 0x08	; 8
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <DIO_u8SetPinValue+0x6>
 1b8:	78 c0       	rjmp	.+240    	; 0x2aa <DIO_u8SetPinValue+0xf6>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
 1ba:	41 11       	cpse	r20, r1
 1bc:	3c c0       	rjmp	.+120    	; 0x236 <DIO_u8SetPinValue+0x82>
		{
			switch(Copy_u8Port)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	99 f0       	breq	.+38     	; 0x1e8 <DIO_u8SetPinValue+0x34>
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_u8SetPinValue+0x1a>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	e9 f0       	breq	.+58     	; 0x202 <DIO_u8SetPinValue+0x4e>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	41 f1       	breq	.+80     	; 0x21c <DIO_u8SetPinValue+0x68>
 1cc:	70 c0       	rjmp	.+224    	; 0x2ae <DIO_u8SetPinValue+0xfa>
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1ce:	2b b3       	in	r18, 0x1b	; 27
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8SetPinValue+0x26>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8SetPinValue+0x22>
 1de:	80 95       	com	r24
 1e0:	82 23       	and	r24, r18
 1e2:	8b bb       	out	0x1b, r24	; 27

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1e6:	08 95       	ret
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_u8SetPinValue+0x40>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_u8SetPinValue+0x3c>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_u8Value==DIO_u8PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 200:	08 95       	ret
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 202:	25 b3       	in	r18, 0x15	; 21
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_u8SetPinValue+0x5a>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_u8SetPinValue+0x56>
 212:	80 95       	com	r24
 214:	82 23       	and	r24, r18
 216:	85 bb       	out	0x15, r24	; 21

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 218:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 21a:	08 95       	ret
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 21c:	22 b3       	in	r18, 0x12	; 18
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_u8SetPinValue+0x74>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_u8SetPinValue+0x70>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	82 bb       	out	0x12, r24	; 18

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 232:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 234:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	e1 f5       	brne	.+120    	; 0x2b2 <DIO_u8SetPinValue+0xfe>
		{
			switch(Copy_u8Port)
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	91 f0       	breq	.+36     	; 0x262 <DIO_u8SetPinValue+0xae>
 23e:	28 f0       	brcs	.+10     	; 0x24a <DIO_u8SetPinValue+0x96>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	d9 f0       	breq	.+54     	; 0x27a <DIO_u8SetPinValue+0xc6>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	29 f1       	breq	.+74     	; 0x292 <DIO_u8SetPinValue+0xde>
 248:	36 c0       	rjmp	.+108    	; 0x2b6 <DIO_u8SetPinValue+0x102>
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_u8SetPinValue+0xa2>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_u8SetPinValue+0x9e>
 25a:	82 2b       	or	r24, r18
 25c:	8b bb       	out	0x1b, r24	; 27

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 25e:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 260:	08 95       	ret
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinValue+0xba>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_u8SetPinValue+0xb6>
 272:	82 2b       	or	r24, r18
 274:	88 bb       	out	0x18, r24	; 24

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 276:	80 e0       	ldi	r24, 0x00	; 0
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 278:	08 95       	ret
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 27a:	25 b3       	in	r18, 0x15	; 21
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPinValue+0xd2>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPinValue+0xce>
 28a:	82 2b       	or	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 28e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 290:	08 95       	ret
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 292:	22 b3       	in	r18, 0x12	; 18
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_u8SetPinValue+0xea>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_u8SetPinValue+0xe6>
 2a2:	82 2b       	or	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18

/**********************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
			switch(Copy_u8Port)
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 2a8:	08 95       	ret
			Local_u8ErrorState=1;
		}
	}
	else
	{
		Local_u8ErrorState=1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
			{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
				default: Local_u8ErrorState=1; break;
			}
		}
		else
		{
			Local_u8ErrorState=1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret
			{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
				default: Local_u8ErrorState=1; break;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_u8ErrorState=1;
	}

	return Local_u8ErrorState;
}
 2b8:	08 95       	ret

000002ba <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;

	switch(Copy_u8Port)
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	49 f0       	breq	.+18     	; 0x2d0 <DIO_u8SetPortValue+0x16>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <DIO_u8SetPortValue+0x10>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <DIO_u8SetPortValue+0x1c>
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	51 f0       	breq	.+20     	; 0x2dc <DIO_u8SetPortValue+0x22>
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 2ca:	6b bb       	out	0x1b, r22	; 27

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2cc:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
 2ce:	08 95       	ret
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 2d0:	68 bb       	out	0x18, r22	; 24

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2d2:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
 2d4:	08 95       	ret
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 2d6:	65 bb       	out	0x15, r22	; 21

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2d8:	80 e0       	ldi	r24, 0x00	; 0

	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
 2da:	08 95       	ret
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 2dc:	62 bb       	out	0x12, r22	; 18

/******************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=0;
 2de:	80 e0       	ldi	r24, 0x00	; 0
	switch(Copy_u8Port)
	{
		case DIO_u8PORTA : PORTA = Copy_u8Value; break;
		case DIO_u8PORTB : PORTB = Copy_u8Value; break;
		case DIO_u8PORTC : PORTC = Copy_u8Value; break;
		case DIO_u8PORTD : PORTD = Copy_u8Value; break;
 2e0:	08 95       	ret
		default: Local_u8ErrorState=1;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return Local_u8ErrorState;
}
 2e4:	08 95       	ret

000002e6 <main>:
int main(void)
{
 SSD_Type _7Segment;
 _7Segment.DataPort=DIO_u8PORTA;
 _7Segment.EnablePort=DIO_u8PORTA;
 _7Segment.Type=SSD_COMMON_CATHODE;
 2e6:	b1 2c       	mov	r11, r1
  SSD_Type _7Segment2;
  _7Segment.DataPort=DIO_u8PORTB;
 2e8:	01 e0       	ldi	r16, 0x01	; 1
  _7Segment.EnablePort=DIO_u8PORTB;
 2ea:	11 e0       	ldi	r17, 0x01	; 1
  _7Segment.Type=SSD_COMMON_CATHODE;
  SSD_voidInitialDataPort(_7Segment);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	9c 2f       	mov	r25, r28
 2f6:	0e 94 b1 01 	call	0x362	; 0x362 <SSD_voidInitialDataPort>
  SSD_voidEnable(_7Segment);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	9c 2f       	mov	r25, r28
 302:	0e 94 b6 01 	call	0x36c	; 0x36c <SSD_voidEnable>
  SSD_voidInitialDataPort(_7Segment2);
 306:	c1 2c       	mov	r12, r1
 308:	d1 2c       	mov	r13, r1
 30a:	76 01       	movw	r14, r12
 30c:	c7 01       	movw	r24, r14
 30e:	b6 01       	movw	r22, r12
 310:	0e 94 b1 01 	call	0x362	; 0x362 <SSD_voidInitialDataPort>
  SSD_voidEnable(_7Segment2);
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	0e 94 b6 01 	call	0x36c	; 0x36c <SSD_voidEnable>
    while (1) 
    {
		
		u8 Local_u8Counter=0;
		u8 Local_u8Counter2=0;
		for(Local_u8Counter=0;Local_u8Counter<10;Local_u8Counter++)
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	1e c0       	rjmp	.+60     	; 0x35c <main+0x76>
		{
			for(Local_u8Counter2=0;Local_u8Counter2<10;Local_u8Counter2++)
			{
			 SSD_voidSendNumber(_7Segment,Local_u8Counter);
 320:	4d 2f       	mov	r20, r29
 322:	6b 2d       	mov	r22, r11
 324:	70 2f       	mov	r23, r16
 326:	81 2f       	mov	r24, r17
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SSD_voidSendNumber>
			 SSD_voidSendNumber(_7Segment2,Local_u8Counter2);
 32e:	4c 2f       	mov	r20, r28
 330:	c1 2c       	mov	r12, r1
 332:	d1 2c       	mov	r13, r1
 334:	76 01       	movw	r14, r12
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <SSD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33e:	2f eb       	ldi	r18, 0xBF	; 191
 340:	87 e2       	ldi	r24, 0x27	; 39
 342:	99 e0       	ldi	r25, 0x09	; 9
 344:	21 50       	subi	r18, 0x01	; 1
 346:	80 40       	sbci	r24, 0x00	; 0
 348:	90 40       	sbci	r25, 0x00	; 0
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x5e>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x68>
 34e:	00 00       	nop
		
		u8 Local_u8Counter=0;
		u8 Local_u8Counter2=0;
		for(Local_u8Counter=0;Local_u8Counter<10;Local_u8Counter++)
		{
			for(Local_u8Counter2=0;Local_u8Counter2<10;Local_u8Counter2++)
 350:	cf 5f       	subi	r28, 0xFF	; 255
 352:	01 c0       	rjmp	.+2      	; 0x356 <main+0x70>
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	ca 30       	cpi	r28, 0x0A	; 10
 358:	18 f3       	brcs	.-58     	; 0x320 <main+0x3a>
    while (1) 
    {
		
		u8 Local_u8Counter=0;
		u8 Local_u8Counter2=0;
		for(Local_u8Counter=0;Local_u8Counter<10;Local_u8Counter++)
 35a:	df 5f       	subi	r29, 0xFF	; 255
 35c:	da 30       	cpi	r29, 0x0A	; 10
 35e:	d0 f3       	brcs	.-12     	; 0x354 <main+0x6e>
 360:	dd cf       	rjmp	.-70     	; 0x31c <main+0x36>

00000362 <SSD_voidInitialDataPort>:

		DIO_u8SetPinDirection( Copy_u8SDD.EnablePort , Copy_u8SDD.EnablePin , DIO_u8PIN_OUTPUT );
		DIO_u8SetPinValue( Copy_u8SDD.EnablePort , Copy_u8SDD.EnablePin , DIO_u8PIN_LOW );

	}
}
 362:	87 2f       	mov	r24, r23
 364:	6f ef       	ldi	r22, 0xFF	; 255
 366:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_u8SetPortDirection>
 36a:	08 95       	ret

0000036c <SSD_voidEnable>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	c8 2f       	mov	r28, r24
 372:	d9 2f       	mov	r29, r25
 374:	61 11       	cpse	r22, r1
 376:	0a c0       	rjmp	.+20     	; 0x38c <SSD_voidEnable+0x20>
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	69 2f       	mov	r22, r25
 37c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	6d 2f       	mov	r22, r29
 384:	8c 2f       	mov	r24, r28
 386:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8SetPinValue>
 38a:	0b c0       	rjmp	.+22     	; 0x3a2 <SSD_voidEnable+0x36>
 38c:	61 30       	cpi	r22, 0x01	; 1
 38e:	49 f4       	brne	.+18     	; 0x3a2 <SSD_voidEnable+0x36>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	69 2f       	mov	r22, r25
 394:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinDirection>
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	6d 2f       	mov	r22, r29
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_u8SetPinValue>
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <SSD_voidSendNumber>:
void SSD_voidSendNumber       ( SSD_Type Copy_u8SDD , u8 Copy_u8Number )
{
	if( Copy_u8SDD.Type == SSD_COMMON_CATHODE ){
 3a8:	61 11       	cpse	r22, r1
 3aa:	09 c0       	rjmp	.+18     	; 0x3be <SSD_voidSendNumber+0x16>

		DIO_u8SetPortValue( Copy_u8SDD.DataPort , Local_u8SSDNumber[ Copy_u8Number ] );
 3ac:	e4 2f       	mov	r30, r20
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	e0 5a       	subi	r30, 0xA0	; 160
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	60 81       	ld	r22, Z
 3b6:	87 2f       	mov	r24, r23
 3b8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8SetPortValue>
 3bc:	08 95       	ret

		}else if( Copy_u8SDD.Type == SSD_COMMON_ANODE ){
 3be:	61 30       	cpi	r22, 0x01	; 1
 3c0:	49 f4       	brne	.+18     	; 0x3d4 <SSD_voidSendNumber+0x2c>

		DIO_u8SetPortValue( Copy_u8SDD.DataPort , ~( Local_u8SSDNumber[ Copy_u8Number ] ) );
 3c2:	e4 2f       	mov	r30, r20
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	e0 5a       	subi	r30, 0xA0	; 160
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	60 81       	ld	r22, Z
 3cc:	60 95       	com	r22
 3ce:	87 2f       	mov	r24, r23
 3d0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8SetPortValue>
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
